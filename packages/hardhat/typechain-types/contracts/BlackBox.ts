/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
<<<<<<< HEAD
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from '../common';

export interface BlackBoxInterface extends utils.Interface {
  functions: {
    'difficulty()': FunctionFragment;
    'getScoreForUserId(uint256)': FunctionFragment;
    'initialize()': FunctionFragment;
    'owner()': FunctionFragment;
    'proxiableUUID()': FunctionFragment;
    'removeScoreForUserId(uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'resetUserStart(uint256)': FunctionFragment;
    'setDifficulty(uint256)': FunctionFragment;
    'start(uint256)': FunctionFragment;
    'submitScore(uint256,uint256)': FunctionFragment;
    'success()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'upgradeTo(address)': FunctionFragment;
    'upgradeToAndCall(address,bytes)': FunctionFragment;
    'usersList(uint256)': FunctionFragment;
    'usersScore(uint256)': FunctionFragment;
=======
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface BlackBoxInterface extends utils.Interface {
  functions: {
    "difficulty()": FunctionFragment;
    "getScoreForUserId(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeScoreForUserId(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resetUserStart(uint256)": FunctionFragment;
    "setDifficulty(uint256)": FunctionFragment;
    "start(uint256)": FunctionFragment;
    "submitScore(uint256,uint256)": FunctionFragment;
    "success()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usersList(uint256)": FunctionFragment;
    "usersScore(uint256)": FunctionFragment;
>>>>>>> 6d267f1 (add hardhat tests)
  };

  getFunction(
    nameOrSignatureOrTopic:
<<<<<<< HEAD
      | 'difficulty'
      | 'getScoreForUserId'
      | 'initialize'
      | 'owner'
      | 'proxiableUUID'
      | 'removeScoreForUserId'
      | 'renounceOwnership'
      | 'resetUserStart'
      | 'setDifficulty'
      | 'start'
      | 'submitScore'
      | 'success'
      | 'transferOwnership'
      | 'upgradeTo'
      | 'upgradeToAndCall'
      | 'usersList'
      | 'usersScore',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'difficulty', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getScoreForUserId', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'initialize', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'proxiableUUID', values?: undefined): string;
  encodeFunctionData(functionFragment: 'removeScoreForUserId', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'resetUserStart', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setDifficulty', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'start', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'submitScore', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'success', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'upgradeTo', values: [string]): string;
  encodeFunctionData(functionFragment: 'upgradeToAndCall', values: [string, BytesLike]): string;
  encodeFunctionData(functionFragment: 'usersList', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'usersScore', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'difficulty', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getScoreForUserId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proxiableUUID', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeScoreForUserId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resetUserStart', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDifficulty', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'start', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'submitScore', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'success', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeToAndCall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'usersList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'usersScore', data: BytesLike): Result;

  events: {
    'AdminChanged(address,address)': EventFragment;
    'BeaconUpgraded(address)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Upgraded(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<[string, string], AdminChangedEventObject>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<[string], BeaconUpgradedEventObject>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

=======
      | "difficulty"
      | "getScoreForUserId"
      | "owner"
      | "removeScoreForUserId"
      | "renounceOwnership"
      | "resetUserStart"
      | "setDifficulty"
      | "start"
      | "submitScore"
      | "success"
      | "transferOwnership"
      | "usersList"
      | "usersScore"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "difficulty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getScoreForUserId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeScoreForUserId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetUserStart",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDifficulty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "start", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "submitScore",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "success", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "usersList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "usersScore",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "difficulty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getScoreForUserId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeScoreForUserId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetUserStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDifficulty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "success", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usersList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usersScore", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

>>>>>>> 6d267f1 (add hardhat tests)
export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

<<<<<<< HEAD
export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;
=======
export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;
>>>>>>> 6d267f1 (add hardhat tests)

export interface BlackBox extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BlackBoxInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
<<<<<<< HEAD
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
=======
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
>>>>>>> 6d267f1 (add hardhat tests)
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    difficulty(overrides?: CallOverrides): Promise<[BigNumber]>;

<<<<<<< HEAD
    getScoreForUserId(_id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    removeScoreForUserId(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
=======
    getScoreForUserId(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeScoreForUserId(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
>>>>>>> 6d267f1 (add hardhat tests)
    ): Promise<ContractTransaction>;

    resetUserStart(
      _id: BigNumberish,
<<<<<<< HEAD
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      overrides?: Overrides & { from?: string | Promise<string> }
>>>>>>> 6d267f1 (add hardhat tests)
    ): Promise<ContractTransaction>;

    setDifficulty(
      _difficulty: BigNumberish,
<<<<<<< HEAD
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      overrides?: Overrides & { from?: string | Promise<string> }
>>>>>>> 6d267f1 (add hardhat tests)
    ): Promise<ContractTransaction>;

    start(
      _id: BigNumberish,
<<<<<<< HEAD
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      overrides?: Overrides & { from?: string | Promise<string> }
>>>>>>> 6d267f1 (add hardhat tests)
    ): Promise<ContractTransaction>;

    submitScore(
      _id: BigNumberish,
      _score: BigNumberish,
<<<<<<< HEAD
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      overrides?: Overrides & { from?: string | Promise<string> }
>>>>>>> 6d267f1 (add hardhat tests)
    ): Promise<ContractTransaction>;

    success(overrides?: CallOverrides): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
<<<<<<< HEAD
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    usersList(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    usersScore(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
=======
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usersList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    usersScore(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
>>>>>>> 6d267f1 (add hardhat tests)
  };

  difficulty(overrides?: CallOverrides): Promise<BigNumber>;

<<<<<<< HEAD
  getScoreForUserId(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  removeScoreForUserId(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> },
=======
  getScoreForUserId(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeScoreForUserId(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
>>>>>>> 6d267f1 (add hardhat tests)
  ): Promise<ContractTransaction>;

  resetUserStart(
    _id: BigNumberish,
<<<<<<< HEAD
    overrides?: Overrides & { from?: string | Promise<string> },
=======
    overrides?: Overrides & { from?: string | Promise<string> }
>>>>>>> 6d267f1 (add hardhat tests)
  ): Promise<ContractTransaction>;

  setDifficulty(
    _difficulty: BigNumberish,
<<<<<<< HEAD
    overrides?: Overrides & { from?: string | Promise<string> },
=======
    overrides?: Overrides & { from?: string | Promise<string> }
>>>>>>> 6d267f1 (add hardhat tests)
  ): Promise<ContractTransaction>;

  start(
    _id: BigNumberish,
<<<<<<< HEAD
    overrides?: Overrides & { from?: string | Promise<string> },
=======
    overrides?: Overrides & { from?: string | Promise<string> }
>>>>>>> 6d267f1 (add hardhat tests)
  ): Promise<ContractTransaction>;

  submitScore(
    _id: BigNumberish,
    _score: BigNumberish,
<<<<<<< HEAD
    overrides?: Overrides & { from?: string | Promise<string> },
=======
    overrides?: Overrides & { from?: string | Promise<string> }
>>>>>>> 6d267f1 (add hardhat tests)
  ): Promise<ContractTransaction>;

  success(overrides?: CallOverrides): Promise<boolean>;

  transferOwnership(
    newOwner: string,
<<<<<<< HEAD
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
=======
    overrides?: Overrides & { from?: string | Promise<string> }
>>>>>>> 6d267f1 (add hardhat tests)
  ): Promise<ContractTransaction>;

  usersList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  usersScore(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    difficulty(overrides?: CallOverrides): Promise<BigNumber>;

<<<<<<< HEAD
    getScoreForUserId(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    removeScoreForUserId(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;
=======
    getScoreForUserId(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeScoreForUserId(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
>>>>>>> 6d267f1 (add hardhat tests)

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resetUserStart(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

<<<<<<< HEAD
    setDifficulty(_difficulty: BigNumberish, overrides?: CallOverrides): Promise<void>;

    start(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    submitScore(_id: BigNumberish, _score: BigNumberish, overrides?: CallOverrides): Promise<void>;

    success(overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    upgradeTo(newImplementation: string, overrides?: CallOverrides): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    usersList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    usersScore(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'AdminChanged(address,address)'(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;
    AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;

    'BeaconUpgraded(address)'(beacon?: string | null): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;

    'Upgraded(address)'(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
=======
    setDifficulty(
      _difficulty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    start(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    submitScore(
      _id: BigNumberish,
      _score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    success(overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usersList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usersScore(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
>>>>>>> 6d267f1 (add hardhat tests)
  };

  estimateGas: {
    difficulty(overrides?: CallOverrides): Promise<BigNumber>;

<<<<<<< HEAD
    getScoreForUserId(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    removeScoreForUserId(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
=======
    getScoreForUserId(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeScoreForUserId(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
>>>>>>> 6d267f1 (add hardhat tests)
    ): Promise<BigNumber>;

    resetUserStart(
      _id: BigNumberish,
<<<<<<< HEAD
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      overrides?: Overrides & { from?: string | Promise<string> }
>>>>>>> 6d267f1 (add hardhat tests)
    ): Promise<BigNumber>;

    setDifficulty(
      _difficulty: BigNumberish,
<<<<<<< HEAD
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      overrides?: Overrides & { from?: string | Promise<string> }
>>>>>>> 6d267f1 (add hardhat tests)
    ): Promise<BigNumber>;

    start(
      _id: BigNumberish,
<<<<<<< HEAD
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      overrides?: Overrides & { from?: string | Promise<string> }
>>>>>>> 6d267f1 (add hardhat tests)
    ): Promise<BigNumber>;

    submitScore(
      _id: BigNumberish,
      _score: BigNumberish,
<<<<<<< HEAD
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      overrides?: Overrides & { from?: string | Promise<string> }
>>>>>>> 6d267f1 (add hardhat tests)
    ): Promise<BigNumber>;

    success(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
<<<<<<< HEAD
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    usersList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    usersScore(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
=======
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usersList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usersScore(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
>>>>>>> 6d267f1 (add hardhat tests)
  };

  populateTransaction: {
    difficulty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

<<<<<<< HEAD
    getScoreForUserId(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> },
=======
    getScoreForUserId(
      _id: BigNumberish,
      overrides?: CallOverrides
>>>>>>> 6d267f1 (add hardhat tests)
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

<<<<<<< HEAD
    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeScoreForUserId(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
=======
    removeScoreForUserId(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
>>>>>>> 6d267f1 (add hardhat tests)
    ): Promise<PopulatedTransaction>;

    resetUserStart(
      _id: BigNumberish,
<<<<<<< HEAD
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      overrides?: Overrides & { from?: string | Promise<string> }
>>>>>>> 6d267f1 (add hardhat tests)
    ): Promise<PopulatedTransaction>;

    setDifficulty(
      _difficulty: BigNumberish,
<<<<<<< HEAD
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      overrides?: Overrides & { from?: string | Promise<string> }
>>>>>>> 6d267f1 (add hardhat tests)
    ): Promise<PopulatedTransaction>;

    start(
      _id: BigNumberish,
<<<<<<< HEAD
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      overrides?: Overrides & { from?: string | Promise<string> }
>>>>>>> 6d267f1 (add hardhat tests)
    ): Promise<PopulatedTransaction>;

    submitScore(
      _id: BigNumberish,
      _score: BigNumberish,
<<<<<<< HEAD
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      overrides?: Overrides & { from?: string | Promise<string> }
>>>>>>> 6d267f1 (add hardhat tests)
    ): Promise<PopulatedTransaction>;

    success(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
<<<<<<< HEAD
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    usersList(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usersScore(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
=======
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usersList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usersScore(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
>>>>>>> 6d267f1 (add hardhat tests)
  };
}
