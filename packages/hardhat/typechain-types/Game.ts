/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Game {
  export type PlayerStruct = { id: BigNumberish; score: BigNumberish };

  export type PlayerStructOutput = [BigNumber, BigNumber] & {
    id: BigNumber;
    score: BigNumber;
  };
}

export interface GameInterface extends utils.Interface {
  contractName: "Game";
  functions: {
    "addressList(address)": FunctionFragment;
    "getAll()": FunctionFragment;
    "players(uint256)": FunctionFragment;
    "start()": FunctionFragment;
    "submitScore(uint256)": FunctionFragment;
    "userScore(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addressList", values: [string]): string;
  encodeFunctionData(functionFragment: "getAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submitScore",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "userScore", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "addressList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userScore", data: BytesLike): Result;

  events: {
    "GameStarted(bool)": EventFragment;
    "NewScore(tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GameStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewScore"): EventFragment;
}

export type GameStartedEvent = TypedEvent<[boolean], { start: boolean }>;

export type GameStartedEventFilter = TypedEventFilter<GameStartedEvent>;

export type NewScoreEvent = TypedEvent<
  [Game.PlayerStructOutput[]],
  { players: Game.PlayerStructOutput[] }
>;

export type NewScoreEventFilter = TypedEventFilter<NewScoreEvent>;

export interface Game extends BaseContract {
  contractName: "Game";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressList(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getAll(overrides?: CallOverrides): Promise<[Game.PlayerStructOutput[]]>;

    players(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { id: BigNumber; score: BigNumber }>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitScore(
      score: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userScore(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addressList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  getAll(overrides?: CallOverrides): Promise<Game.PlayerStructOutput[]>;

  players(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { id: BigNumber; score: BigNumber }>;

  start(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitScore(
    score: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userScore(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addressList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAll(overrides?: CallOverrides): Promise<Game.PlayerStructOutput[]>;

    players(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { id: BigNumber; score: BigNumber }>;

    start(overrides?: CallOverrides): Promise<void>;

    submitScore(score: BigNumberish, overrides?: CallOverrides): Promise<void>;

    userScore(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "GameStarted(bool)"(start?: null): GameStartedEventFilter;
    GameStarted(start?: null): GameStartedEventFilter;

    "NewScore(tuple[])"(players?: null): NewScoreEventFilter;
    NewScore(players?: null): NewScoreEventFilter;
  };

  estimateGas: {
    addressList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAll(overrides?: CallOverrides): Promise<BigNumber>;

    players(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitScore(
      score: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userScore(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addressList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAll(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    players(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitScore(
      score: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userScore(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
